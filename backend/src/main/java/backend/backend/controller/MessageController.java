package backend.backend.controller;

import backend.backend.dto.ChatMessage;
import backend.backend.dto.MessageRequest;
import backend.backend.model.Message;
import backend.backend.model.MessageType;
import backend.backend.model.ResponseObject;
import backend.backend.model.User;
import backend.backend.service.MessageService;
import backend.backend.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
@RestController
@RequestMapping("/api/messages")
public class MessageController {

    @Autowired
    private MessageService messageService;

    @Autowired
    private SimpMessagingTemplate messagingTemplate;

    @Autowired
    private UserService userService;

    // API g·ª≠i tin nh·∫Øn, l∆∞u v√†o CSDL
    @PostMapping("/send")
    public ResponseObject sendMessage(@RequestBody MessageRequest messageRequest) {
        try {
            User sender = userService.findById(messageRequest.getSenderId()).orElse(null);
            User receiver = userService.findById(messageRequest.getReceiverId()).orElse(null);
            if (sender == null || receiver == null) {
                return new ResponseObject("error", "User not found", null);
            }
            Message message = new Message(sender, receiver, messageRequest.getMessage(), MessageType.CHAT);
            Message savedMessage = messageService.saveMessage(message);
            return new ResponseObject("success", "Message sent successfully", savedMessage);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseObject("error", "Failed to send message", null);
        }
    }

    // Endpoint WebSocket ƒë·ªÉ nh·∫≠n tin nh·∫Øn real-time t·ª´ client
    @MessageMapping("/chat")
    public void handleChatMessage(@Payload ChatMessage chatMsg) {
        try {
            System.out.println("üì© Nh·∫≠n tin nh·∫Øn t·ª´ client: " + chatMsg);

            // L·∫•y ƒë·ªëi t∆∞·ª£ng User t·ª´ DB d·ª±a tr√™n senderId
            User sender = userService.findById(chatMsg.getSenderId())
                    .orElseThrow(() -> new RuntimeException("User not found"));

            // T·∫°o ƒë·ªëi t∆∞·ª£ng Message (ch·ªâ h·ªó tr·ª£ chat 1-1)
            Message message = new Message();
            message.setSender(sender);
            message.setContent(chatMsg.getContent());
            message.setType(MessageType.valueOf(chatMsg.getType()));

            // N·∫øu c·∫ßn, c√≥ th·ªÉ set receiver t·ª´ th√¥ng tin kh√°c (v√≠ d·ª•: t·ª´ MessageRequest) n·∫øu m·ªü r·ªông ch·ª©c nƒÉng
            Message savedMessage = messageService.saveMessage(message);

            // Broadcast t·ªõi t·∫•t c·∫£ client subscribe /topic/messages (ho·∫∑c thay ƒë·ªïi theo k√™nh ri√™ng n·∫øu c·∫ßn)
            messagingTemplate.convertAndSend("/topic/messages", savedMessage);
            System.out.println("üì§ G·ª≠i tin nh·∫Øn t·ªõi /topic/messages: " + savedMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // API l·∫•y t·∫•t c·∫£ tin nh·∫Øn gi·ªØa 2 ng∆∞·ªùi d√πng (chat 1-1)
    @GetMapping("/{user1Id}/{user2Id}")
    public ResponseObject getMessagesBetweenUsers(@PathVariable Long user1Id, @PathVariable Long user2Id) {
        try {
            List<Message> messages = messageService.getMessagesBetweenUsers(user1Id, user2Id);
            return new ResponseObject("success", "Messages fetched successfully", messages);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseObject("error", "Failed to fetch messages", null);
        }
    }
    // Endpoint l·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán c·ªßa user (chat 1-1)
@GetMapping("/conversations/{userId}")
public ResponseObject getConversations(@PathVariable Long userId) {
    try {
        // L·∫•y t·∫•t c·∫£ tin nh·∫Øn c√≥ li√™n quan ƒë·∫øn user (g·ª≠i ho·∫∑c nh·∫≠n)
        List<Message> messages = messageService.getMessagesByUserId(userId);
        // Nh√≥m tin nh·∫Øn theo ƒë·ªëi t√°c chat
        Map<Long, Map<String, Object>> conversationsMap = new HashMap<>();
        System.out.println("üîç L·∫•y cu·ªôc tr√≤ chuy·ªán c·ªßa user: " );
        for (Message msg : messages) {
            // X√°c ƒë·ªãnh ƒë·ªëi t√°c: n·∫øu user l√† sender th√¨ ƒë·ªëi t√°c l√† receiver, ng∆∞·ª£c l·∫°i
            Long partnerId = userId.equals(msg.getSenderId()) 
                    ? msg.getReceiverId() 
                    : msg.getSenderId();
            
            // L·∫•y th√¥ng tin ƒë·ªëi t√°c
            User partner = userService.findById(partnerId).orElse(null);
            if (partner == null) continue;
            
            // N·∫øu ch∆∞a c√≥ cu·ªôc h·ªôi tho·∫°i, kh·ªüi t·∫°o
            if (!conversationsMap.containsKey(partnerId)) {
                Map<String, Object> conv = new HashMap<>();
                conv.put("id", partnerId);
                conv.put("name", partner.getUsername());
                conv.put("avatar", partner.getAvatar());
                conv.put("message", msg.getContent());
                conv.put("time", msg.getSentAt());
                conv.put("online", false); // N·∫øu c√≥ logic online, b·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t ·ªü ƒë√¢y
                conversationsMap.put(partnerId, conv);
            } else {
                // C·∫≠p nh·∫≠t tin nh·∫Øn m·ªõi nh·∫•t n·∫øu c·∫ßn
                Map<String, Object> conv = conversationsMap.get(partnerId);
                // So s√°nh th·ªùi gian ƒë·ªÉ x√°c ƒë·ªãnh tin nh·∫Øn m·ªõi h∆°n
                LocalDateTime existingTime = (LocalDateTime) conv.get("time");
                if (msg.getSentAt().isAfter(existingTime)) {
                    conv.put("message", msg.getContent());
                    conv.put("time", msg.getSentAt());
                }
            }
        }
        List<Map<String, Object>> convList = new ArrayList<>(conversationsMap.values());
        return new ResponseObject("success", "Conversations fetched successfully", convList);
    } catch (Exception e) {
        e.printStackTrace();
        return new ResponseObject("error", "Failed to fetch conversations", null);
    }
}

}